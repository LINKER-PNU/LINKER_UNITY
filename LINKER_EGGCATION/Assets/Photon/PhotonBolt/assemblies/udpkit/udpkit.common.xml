<?xml version="1.0"?>
<doc>
    <assembly>
        <name>udpkit.common</name>
    </assembly>
    <members>
        <member name="T:UdpKit.Blit">
            <summary>
            Blit manages byte arrays, to read and write data.
            </summary>
        </member>
        <member name="M:UdpKit.Blit.PackBool(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Pack the bool.
            </summary>
            <returns><c>true</c>, if bool was packed, <c>false</c> otherwise.</returns>
            <param name="bytes">Bytes array to write to.</param>
            <param name="offset">Offset inside the byte array.</param>
            <param name="value">Bool value to set.</param>
        </member>
        <member name="M:UdpKit.Blit.ReadBool(System.Byte[],System.Int32@)">
            <summary>
            Read bool from the byte array.
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="offset">Offset inside the byte array.</param>
            <returns>The bool</returns>
        </member>
        <member name="M:UdpKit.Blit.PackByte(System.Byte[],System.Int32@,System.Byte)">
            <summary>
            Pack a Byte.
            </summary>
            <param name="bytes">Bytes array to write to.</param>
            <param name="offset">Offset inside the byte array.</param>
            <param name="value">Byte value to set</param>
        </member>
        <member name="M:UdpKit.Blit.ReadByte(System.Byte[],System.Int32@)">
            <summary>
            Read byte from the byte array
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="offset">Offset inside the byte array.</param>
            <returns>The byte</returns>
        </member>
        <member name="M:UdpKit.Blit.GetBytesPrefixSize(System.Byte[])">
            <summary>
            Get the byte array prefix size
            </summary>
            <param name="bytes">Byte array</param>
            <returns>Prefix size</returns>
        </member>
        <member name="M:UdpKit.Blit.PackBytesPrefix(System.Byte[],System.Int32@,System.Byte[])">
            <summary>
            Pack the prefix to the byte array 
            </summary>
            <param name="bytes">Byte array to write</param>
            <param name="offset">Offset inside the byte array.</param>
            <param name="from">Prefix byte array</param>
        </member>
        <member name="M:UdpKit.Blit.ReadBytesPrefix(System.Byte[],System.Int32@)">
            <summary>
            Read the prefix from the byte array
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="offset">Offset inside the byte array.</param>
            <returns>The prefix data array</returns>
        </member>
        <member name="M:UdpKit.Blit.PackBytes(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Pack byte array
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="offset">Offset inside the byte array.</param>
            <param name="from">Byte array to pack</param>
            <param name="length">Byte array size</param>
        </member>
        <member name="M:UdpKit.Blit.ReadBytes(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Read byte array
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="offset">Offset inside the byte array.</param>
            <param name="into">Target byte array to be filled.</param>
            <param name="length">Target byte array size.</param>
        </member>
        <member name="M:UdpKit.Blit.PackBytes(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pack byte array
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="bytesOffset">Offset inside the byte array.</param>
            <param name="from">Byte array to pack</param>
            <param name="fromOffset">Offset inside the from byte array</param>
            <param name="length">From byte array size</param>
        </member>
        <member name="M:UdpKit.Blit.ReadBytes(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read byte array
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="bytesOffset">Offset inside the byte array.</param>
            <param name="into">Target byte array to insert the data</param>
            <param name="intoOffset">Offset in the target byte array</param>
            <param name="length">Target byte array size</param>
        </member>
        <member name="M:UdpKit.Blit.PackU16(System.Byte[],System.Int32@,System.UInt16)">
            <summary>
            Pack a ushort value into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.ReadU16(System.Byte[],System.Int32@)">
            <summary>
            Read a ushort from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>ushort value</returns>
        </member>
        <member name="M:UdpKit.Blit.PackI32(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Pack a int32 value into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.ReadI32(System.Byte[],System.Int32@)">
            <summary>
            Read a int32 from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>int32 value</returns>
        </member>
        <member name="M:UdpKit.Blit.PackU32(System.Byte[],System.Int32@,System.UInt32)">
            <summary>
            Pack a uint32 value into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.PackU32(System.Byte[],System.Int32@,System.UInt32,System.Int32)">
            <summary>
            Pack a uint32 value into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
            <param name="byteCount">Total number of bytes from the uint32 value to insert into the byte array</param>
        </member>
        <member name="M:UdpKit.Blit.ReadU32(System.Byte[],System.Int32@)">
            <summary>
            Read a uint32 from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>uint32 value</returns>
        </member>
        <member name="M:UdpKit.Blit.ReadU32(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Read a int32 from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="byteCount">Total number of bytes from the uint32 value to read from the byte array</param>
            <returns>uint32 value</returns>
        </member>
        <member name="M:UdpKit.Blit.PackF32(System.Byte[],System.Int32,System.Single)">
            <summary>
            Pack a float value into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.ReadF32(System.Byte[],System.Int32)">
            <summary>
            Read a float from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>float value</returns>
        </member>
        <member name="M:UdpKit.Blit.PackU64(System.Byte[],System.Int32@,System.UInt64)">
            <summary>
            Pack a uint64 value into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.ReadU64(System.Byte[],System.Int32@)">
            <summary>
            Read a uint64 from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>uint64 value</returns>
        </member>
        <member name="M:UdpKit.Blit.GetStringSize(System.String)">
            <summary>
            Return the total number of bytes needed to encode a string
            </summary>
            <param name="value">Target string</param>
            <returns>Total number of bytes</returns>
        </member>
        <member name="M:UdpKit.Blit.PackString(System.Byte[],System.Int32@,System.String)">
            <summary>
            Pack string into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.ReadString(System.Byte[],System.Int32@)">
            <summary>
            Read a string from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>string value or null if not found</returns>
        </member>
        <member name="M:UdpKit.Blit.ReadEndPoint(System.Byte[],System.Int32@)">
            <summary>
            Read a EndPoint from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>EndPoint object</returns>
        </member>
        <member name="M:UdpKit.Blit.PackEndPoint(System.Byte[],System.Int32@,UdpKit.UdpEndPoint)">
            <summary>
            Pack EndPoint into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="endpoint">EndPoint object to insert into the byte array</param>
        </member>
        <member name="M:UdpKit.Blit.PackGuid(System.Byte[],System.Int32@,System.Guid)">
            <summary>
            Pack GUID into the byte array
            </summary>
            <param name="bytes">Byte array to insert the data</param>
            <param name="offset">Offset on the byte array</param>
            <param name="value">Value to be inserted</param>
        </member>
        <member name="M:UdpKit.Blit.ReadGuid(System.Byte[],System.Int32@)">
            <summary>
            Read a GUID from the byte array
            </summary>
            <param name="bytes">Byte array to read the data</param>
            <param name="offset">Offset on the byte array</param>
            <returns>GUID object</returns>
        </member>
        <member name="T:UdpKit.UdpEndPoint">
            <summary>
            UPD EndPoint represents an network endpoint
            </summary>
        </member>
        <member name="T:UdpKit.UdpEndPoint.Native">
            <summary>
            Native representation of a UdpEndPoint
            Used when it's necessary to exchange data between managed and unmanaged code
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.Native.Address">
            <summary>
            Native representation of the IPV4
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.Native.Port">
            <summary>
            EndPoint Port
            </summary>
        </member>
        <member name="P:UdpKit.UdpEndPoint.Native.AsManaged">
            <summary>
            Convert the internal properties into a Managed version of UdpEndPoint
            </summary>
        </member>
        <member name="T:UdpKit.UdpEndPoint.Comparer">
            <summary>
            UdpEndPoint comparer
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.Any">
            <summary>
            Represents Any IPv4 Address
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.AnyIPv6">
            <summary>
            Represents Any IPv6 Address
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.Port">
            <summary>
            EndPoint Port
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.SteamId">
            <summary>
            EndPoint ID
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.IPv6">
            <summary>
            Flag signaling if this EndPoint represents a IPv6
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.Address">
            <summary>
            EndPoint IPv4 Address
            </summary>
        </member>
        <member name="F:UdpKit.UdpEndPoint.AddressIPv6">
            <summary>
            EndPoint IPv6 Address
            </summary>
        </member>
        <member name="P:UdpKit.UdpEndPoint.IsWan">
            <summary>
            Flag signaling if this EndPoint is a WAN Address
            </summary>
        </member>
        <member name="P:UdpKit.UdpEndPoint.IsLan">
            <summary>
            Flag signaling if this EndPoint is a LAN Address
            </summary>
        </member>
        <member name="P:UdpKit.UdpEndPoint.AsNative">
            <summary>
            Convert this EndPoint from managed to unmanaged
            </summary>
        </member>
        <member name="M:UdpKit.UdpEndPoint.#ctor(UdpKit.UdpIPv4Address,System.UInt16)">
            <summary>
            Build a new UdpEndPoint using a IPv4 Address and Port
            </summary>
            <param name="address">IPv4 Address</param>
            <param name="port">Port</param>
        </member>
        <member name="M:UdpKit.UdpEndPoint.#ctor(UdpKit.UdpIPv6Address,System.UInt16)">
            <summary>
            Build a new UdpEndPoint using a IPv6 Address and Port
            </summary>
            <param name="address">IPv6 Address</param>
            <param name="port">Port</param>
        </member>
        <member name="M:UdpKit.UdpEndPoint.#ctor(UdpKit.UdpSteamID)">
            <summary>
            Build a new UdpEndPoint using a ID
            </summary>
            <param name="steamId">EndPoint ID</param>
        </member>
        <member name="M:UdpKit.UdpEndPoint.#ctor(System.UInt64)">
            <summary>
            Build a new UdpEndPoint using a ID
            </summary>
            <param name="id">EndPoint ID</param>
        </member>
        <member name="M:UdpKit.UdpEndPoint.CompareTo(UdpKit.UdpEndPoint)">
            <summary>
            Compare UdpEndPoints
            </summary>
            <param name="other">Other EndPoint to compare</param>
            <returns>Order between EndPoints</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.Equals(UdpKit.UdpEndPoint)">
            <summary>
            Test if the other EndPoint is Equals to this one
            </summary>
            <param name="other">Other EndPoint</param>
            <returns>True if equals, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.GetHashCode">
            <summary>
            Generates a HashCode based on the EndPoint data
            </summary>
            <returns>HashCode for the EndPoint</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.Equals(System.Object)">
            <summary>
            Test if the other object is equals to this one
            </summary>
            <param name="obj">Other object to compare</param>
            <returns>True if equals, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.ToString">
            <summary>
            Convert the EndPoint to a string format
            </summary>
            <returns>Formatted string</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.Parse(System.String)">
            <summary>
            Try to parse Address:Port information to a UdpEndPoint instance
            </summary>
            <param name="endpoint">EndPoint description, accepts IPv4 and IPv6 values</param>
            <returns>New instance of UdpEndPoint built using the parameter</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.op_Equality(UdpKit.UdpEndPoint,UdpKit.UdpEndPoint)">
            <summary>
            Test if EndPoints are Equals
            </summary>
            <param name="x">First EndPoint</param>
            <param name="y">Second EndPoint</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.op_Inequality(UdpKit.UdpEndPoint,UdpKit.UdpEndPoint)">
            <summary>
            Test if EndPoints are NOT Equals
            </summary>
            <param name="x">First EndPoint</param>
            <param name="y">Second EndPoint</param>
            <returns>True if NOT equal, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpEndPoint.op_BitwiseAnd(UdpKit.UdpEndPoint,UdpKit.UdpEndPoint)">
            <summary>
            AND Operator between EndPoints
            </summary>
            <param name="a">First EndPoint</param>
            <param name="b">Second EndPoint</param>
            <returns>Result of AND Operator</returns>
        </member>
        <member name="T:UdpKit.UdpException">
            <summary>
            Represents a custom UdpException
            </summary>
        </member>
        <member name="T:UdpKit.UdpIPv4Address">
            <summary>
            Represents a IPv4 Address
            </summary>
        </member>
        <member name="T:UdpKit.UdpIPv4Address.Comparer">
            <summary>
            UdpIPv4Address comparer
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Comparer.Instance">
            <summary>
            Static instance of the Comparer
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Any">
            <summary>
            Represent a IPv4 Any Address 0.0.0.0
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Localhost">
            <summary>
            Represents the localhost IPv4 127.0.0.1
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Broadcast">
            <summary>
            Represents the broadcast IPv4 255.255.255.255
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Packed">
            <summary>
            Stores that 32bit representation address of this IPv4
            </summary>
            <example>
            <code>
            const string ip = "82.39.106.191"; // original IP
            var ipBytes = IPAddress.Parse(ip).GetAddressBytes(); // get byte array
            var ipLong = BitConverter.ToUInt32(ipBytes, 0); // convert to 32bit representation
            </code>
            </example>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Byte0">
            <summary>
            Stores the 1th 8bit of this address
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Byte1">
            <summary>
            Stores the 2th 8bit of this address
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Byte2">
            <summary>
            Stores the 3th 8bit of this address
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv4Address.Byte3">
            <summary>
            Stores the 4th 8bit of this address
            </summary>
        </member>
        <member name="M:UdpKit.UdpIPv4Address.#ctor(System.UInt32)">
            <summary>
            Build a UdpIPv4Address based on the 32bit address representation
            </summary>
            <param name="packed">IPv4 into a 32bit format</param>
        </member>
        <member name="M:UdpKit.UdpIPv4Address.#ctor(System.Int64)">
            <summary>
            Build a UdpIPv4Address based on the 64bit long address in network order
            </summary>
            <param name="addr">Address to be used build the UdpIPv4Address</param>
        </member>
        <member name="M:UdpKit.UdpIPv4Address.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Build a UdpIPv4Address based on each byte that represents a part of the full IP
            </summary>
            <param name="a">1th part of the IP</param>
            <param name="b">2th part of the IP</param>
            <param name="c">3th part of the IP</param>
            <param name="d">4th part of the IP</param>
        </member>
        <member name="P:UdpKit.UdpIPv4Address.IsAny">
            <summary>
            Signal if this IP represents a Any IP
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv4Address.IsLocalHost">
            <summary>
            Signal if this IP represents a Localhost IP
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv4Address.IsBroadcast">
            <summary>
            Signal if this IP represents a Broadcast IP
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv4Address.IsPrivate">
            <summary>
            Signal if this IP represents a Private IP
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv4Address.IsWan">
            <summary>
            Signal if this IP presents a WAN IP
            </summary>
        </member>
        <member name="M:UdpKit.UdpIPv4Address.Parse(System.String)">
            <summary>
            Parse a string into a UdpIPv4Address
            </summary>
            <param name="address">String address to be parsed</param>
            <returns>UdpIPv4Address reference based on the IP</returns>
            <remarks>It will throw FormatException if the address in the string is not propertly formatted</remarks>
        </member>
        <member name="T:UdpKit.UdpIPv6Address">
            <summary>
            Represents a IPv6 Address
            </summary>
        </member>
        <member name="T:UdpKit.UdpIPv6Address.Comparer">
            <summary>
            UdpIPv6Address Comparer
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv6Address.Comparer.Instance">
            <summary>
            Comparer instance
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv6Address.Any">
            <summary>
            Represents the IPv6 Any address
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv6Address.Mask">
            <summary>
            Stores the IPv6 Mask with 16 bytes
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv6Address.Localhost">
            <summary>
            Represents the IPv6 Localhost address
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv6Address.Packed0">
            <summary>
            Represents the 1th 64bits of the IPv6 Address in long format
            </summary>
        </member>
        <member name="F:UdpKit.UdpIPv6Address.Packed1">
            <summary>
            Represents the 2th 64bits of the IPv6 Address in long format
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv6Address.IsAny">
            <summary>
            Signal if this is Any address, with all address positions as 0
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv6Address.IsLocalHost">
            <summary>
            Signal if this is a Localhost address
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv6Address.IsBroadcast">
            <summary>
            Signal if this is a broadcast address, always false
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv6Address.IsWan">
            <summary>
            Signal if this is a WAN address
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv6Address.IsPrivate">
            <summary>
            Signal if this is a private IPv6
            </summary>
        </member>
        <member name="P:UdpKit.UdpIPv6Address.Bytes">
            <summary>
            Get the full bytes that makes this IPv6 address
            </summary>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.#ctor(System.Byte[])">
            <summary>
            Build a new UdpIPv6Addressbased on the byte array passed as argument
            </summary>
            <param name="address">Byte array with values to build the IPv6 address</param>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Build a UdpIPv6Address based on the packet values representation
            </summary>
            <param name="packed0">1th part of the address</param>
            <param name="packed1">2th part of the address</param>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.Equals(UdpKit.UdpIPv6Address)">
            <summary>
            Check if two UdpIPv6Address are equal
            </summary>
            <param name="other">Other UdpIPv6Address to check</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.CompareTo(UdpKit.UdpIPv6Address)">
            <summary>
            Compare two UdpIPv6Address
            </summary>
            <param name="other">Other UdpIPv6Address to compare</param>
            <returns>1 if this IPv6 is greater, -1 otherwise, 0 if equal</returns>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.GetHashCode">
            <summary>
            Build the hash code of this UdpIPv6Address
            </summary>
            <returns>int that represents the Hash code for this address</returns>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.Equals(System.Object)">
            <summary>
            Check if a object is equals to this UdpIPv6Address
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.op_Equality(UdpKit.UdpIPv6Address,UdpKit.UdpIPv6Address)">
            <summary>
            Check if this UdpIPv6Address is equal to another UdpIPv6Address
            </summary>
            <param name="x">UdpIPv6Address to compare</param>
            <param name="y">the UdpIPv6Address counterpart to compare</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.op_Inequality(UdpKit.UdpIPv6Address,UdpKit.UdpIPv6Address)">
            <summary>
            Check if this UdpIPv6Address is NOT equal to another UdpIPv6Address
            </summary>
            <param name="x">UdpIPv6Address to compare</param>
            <param name="y">the UdpIPv6Address counterpart to compare</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.Parse(System.String)">
            <summary>
            Parse a String IP into a UdpIPv6Address
            </summary>
            <param name="address">String formatted IP address to be parsed</param>
            <returns>UdpIPv6Address built based on the IP string</returns>
            <remarks>Will throw ArgumentException if it's not a valid IP address</remarks>
        </member>
        <member name="M:UdpKit.UdpIPv6Address.op_BitwiseAnd(UdpKit.UdpIPv6Address,UdpKit.UdpIPv6Address)">
            <summary>
            Apply a AND operator between all bits for both UdpIPv6Address
            </summary>
            <param name="a">UdpIPv6Address 1 to merge</param>
            <param name="b">UdpIPv6Address 2 to merge</param>
            <returns>A new UdpIPv6Address that results of the AND operation between the pair of UdpIPv6Address</returns>
        </member>
        <member name="M:UdpKit.NatFeatures.Clone">
            <summary>
            Clone this instance.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="M:UdpKit.NatFeatures.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:UdpKit.NatFeatures"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:UdpKit.NatFeatures"/>.</returns>
        </member>
        <member name="T:UdpKit.UdpSessionSource">
            <summary>
            UDP session source.
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionSource.Lan">
            <summary>
            LAN Source
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionSource.Photon">
            <summary>
            Photon Service Source
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionSource.None">
            <summary>
            None of the other source
            </summary>
        </member>
        <member name="T:UdpKit.UdpSessionError">
            <summary>
            Udp Session Error Enum
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionError.Ok">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionError.GameIdAlreadyExists">
            <summary>
            A game with same ID already exists
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionError.GameFull">
            <summary>
            The game server is full
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionError.GameClosed">
            <summary>
            The game server is closed
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionError.GameDoesNotExist">
            <summary>
            The game with the ID was not found
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionError.Error">
            <summary>
            Generic error
            </summary>
        </member>
        <member name="T:UdpKit.UdpSession">
            <summary>
            Base class for a UDPKit session.
            This class represents a session that can be used as starting point for a connection when Direct IP
            connection is not available.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.Id">
            <summary>
            Gets the session identifier.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.Source">
            <summary>
            Gets the session source.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.WanEndPoint">
            <summary>
            Gets the WAN end point of this Session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.LanEndPoint">
            <summary>
            Gets the LAN end point of this Session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.HostData">
            <summary>
            Arbitrary Object that can be set on the session. It's used to save the Session Token.
            Same as <see cref="P:UdpKit.UdpSession.HostObject"/>, but in byte array form.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.HostObject">
            <summary>
            Arbitrary Object that can be set on the session. It's used to save the Session Token.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.ConnectionsMax">
            <summary>
            Gets the max connections allowed on this session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.ConnectionsCurrent">
            <summary>
            Gets the current total of connections.
            </summary>
            <value>The connections current.</value>
        </member>
        <member name="P:UdpKit.UdpSession.HostName">
            <summary>
            Gets the host name that is publishing this session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSession.IsDedicatedServer">
            <summary>
            Gets a value indicating whether this <see cref="T:UdpKit.UdpSessionImpl"/> is dedicated server.
            </summary>
            <value><c>true</c> if is dedicated server; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:UdpKit.UdpSession.HasWan">
            <summary>
            Gets a value indicating whether this <see cref="T:UdpKit.UdpSessionImpl"/> has WAN Address.
            </summary>
            <value><c>true</c> if has wan; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:UdpKit.UdpSession.HasLan">
            <summary>
            Gets a value indicating whether this <see cref="T:UdpKit.UdpSessionImpl"/> has lan.
            </summary>
            <value><c>true</c> if has lan; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:UdpKit.UdpSession.Clone">
            <summary>
            Clone this instance.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="T:UdpKit.UdpSessionImpl">
            <summary>
            UDPKit session Implementation.
            This class represents a session that can be used as starting point for a connection when Direct IP
            connection is not available.
            </summary>
        </member>
        <member name="M:UdpKit.UdpSessionImpl.Build(System.String)">
            <summary>
            Build a new UdpSession based on the Host ID string
            </summary>
            <param name="hostID">Host ID, just an string that identify the source of the session</param>
            <returns>UdpSession reference</returns>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.Id">
            <summary>
            Gets the session identifier.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.Source">
            <summary>
            Gets the session source.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.WanEndPoint">
            <summary>
            Gets the WAN end point of this Session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.LanEndPoint">
            <summary>
            Gets the LAN end point of this Session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.ConnectionsMax">
            <summary>
            Gets the max connections allowed on this session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.ConnectionsCurrent">
            <summary>
            Gets the current total of connections.
            </summary>
            <value>The connections current.</value>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.HostName">
            <summary>
            Gets the host name that is publishing this session.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.IsDedicatedServer">
            <summary>
            Gets a value indicating whether this <see cref="T:UdpKit.UdpSessionImpl"/> is dedicated server.
            </summary>
            <value><c>true</c> if is dedicated server; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.HasWan">
            <summary>
            Gets a value indicating whether this <see cref="T:UdpKit.UdpSessionImpl"/> has WAN Address.
            </summary>
            <value><c>true</c> if has wan; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.HasLan">
            <summary>
            Gets a value indicating whether this <see cref="T:UdpKit.UdpSessionImpl"/> has lan.
            </summary>
            <value><c>true</c> if has lan; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.HostData">
            <summary>
            Arbitrary Object that can be set on the session. It's used to save the Session Token.
            Same as <see cref="P:UdpKit.UdpSessionImpl.HostObject"/>, but in byte array form.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionImpl.HostObject">
            <summary>
            Arbitrary Object that can be set on the session. It's used to save the Session Token.
            </summary>
        </member>
        <member name="M:UdpKit.UdpSessionImpl.Clone">
            <summary>
            Clone this instance using <see cref="M:System.Object.MemberwiseClone"/>
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="T:UdpKit.UdpSteamID">
            <summary>
            UDP steam identifier.
            </summary>
        </member>
        <member name="F:UdpKit.UdpSteamID.Id">
            <summary>
            The Steam identifier.
            </summary>
        </member>
        <member name="M:UdpKit.UdpSteamID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:UdpKit.UdpSteamID"/> struct.
            </summary>
            <param name="id">Identifier.</param>
        </member>
        <member name="T:UdpKit.Singleton`1">
            <summary>
            Represents a Singleton instance, just for Utility
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UdpKit.Singleton`1.instanceLock">
            <summary>
            Instance lock
            </summary>
        </member>
        <member name="P:UdpKit.Singleton`1.Instance">
            <summary>
            Public instance reference
            </summary>
        </member>
        <member name="T:UdpKit.UdpSessionFillMode">
            <summary>
            Determines how the Sessions are filled with new players
            when the peer joins the session in a random fashion
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionFillMode.Fill">
            <summary>
            Fills up rooms (oldest first) to get players together as fast as possible. Default.
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionFillMode.Serial">
            <summary>
            Distributes players across available rooms sequentially but takes filter into account. Without filter, rooms get players evenly distributed.
            </summary>
        </member>
        <member name="F:UdpKit.UdpSessionFillMode.Random">
            <summary>
            Joins a (fully) random room. Expected properties must match but aside from this, any available room might be selected.
            </summary>
        </member>
        <member name="T:UdpKit.UdpSessionFilter">
            <summary>
            Used to filter only specific sessions that agree with the desired parameters when joining a session in a random fashion.
            </summary>
        </member>
        <member name="P:UdpKit.UdpSessionFilter.FillMode">
            <summary>
            Configure the fill mode used to join a session.
            Default is <see cref="F:UdpKit.UdpSessionFillMode.Fill"/>.
            </summary>
        </member>
        <member name="M:UdpKit.UdpSessionFilter.#ctor">
            <summary>
            UdpSession filter constructor
            </summary>
        </member>
        <member name="M:UdpKit.UdpSessionFilter.Add(System.String,System.Object)">
            <summary>
            Adds a filter parameter.
            </summary>
            <returns><c>true</c>, if the parameter was added, <c>false</c> otherwise.</returns>
            <param name="key">Parameter Key.</param>
            <param name="value">Parameter Value.</param>
        </member>
        <member name="M:UdpKit.UdpSessionFilter.Remove(System.String)">
            <summary>
            Removes a filter parameter.
            </summary>
            <returns><c>true</c>, if the parameter was removed, <c>false</c> otherwise.</returns>
            <param name="key">Parameter Key.</param>
        </member>
        <member name="P:UdpKit.UdpSessionFilter.Item(System.String)">
            <summary>
            Index operator to read and write values.
            </summary>
            <param name="key">Parameter Key</param>
            <returns>Parameter Value, if exists</returns>
        </member>
        <member name="M:UdpKit.UdpSessionFilter.GetEnumerator">
            <summary>
            Get a Enumerator reference based on the internal Filter dictionary
            </summary>
            <returns>Dictionary.Enumerator reference</returns>
        </member>
        <member name="M:UdpKit.UdpSessionFilter.ToString">
            <summary>
            String representation of the SessionFilter
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:UdpKit.UdpSessionFilter.IsValid(System.Object)">
            <summary>
            Test if the object passed as argument is a valid Type to be used as filter parameter
            </summary>
            <param name="value">Value to be tested</param>
            <returns><c>true</c> if is a valid Type, <c>false</c> otherwise</returns>
        </member>
        <member name="T:UdpKit.Utils.IPAddressExtensions">
            <summary>
            Set of IPAddress extension methods
            </summary>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Extract the Broadcast address from an IP based on the sub-net mask
            </summary>
            <param name="address">Base Address</param>
            <param name="subnetMask">Subnet Mark</param>
            <returns>Broadcast address of the network</returns>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.GetNetworkAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Get the base IP address based on the Subnet mask
            </summary>
            <param name="address">IP address to verify</param>
            <param name="subnetMask">Subnet mask</param>
            <returns>Base IP</returns>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.IsInSameSubnet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Check if two IP seems to be on the same subnet based on the sub-net mask
            </summary>
            <param name="address2">Base address to check</param>
            <param name="address">Target address to check</param>
            <param name="subnetMask">Subnet mask used for the check</param>
            <returns>True if both IPs seems to be on the same subnet</returns>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.IsInSameSubnet(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Check if two IP seems to be on the same subnet based on all major classes of Submask
            </summary>
            <param name="address2">Base address to check</param>
            <param name="address">Target address to check</param>
            <returns>True if both IPs seems to be on the same subnet in at least one case</returns>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.IsPrivate(System.Net.IPAddress)">
            <summary>
            Check if a IPAdress describes a private IP
            </summary>
            <param name="address">IPAdress to check</param>
            <returns>True if it is private, false otherwise</returns>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.ToLong(System.Net.IPAddress)">
            <summary>
            Converts a IPAddress into the long representation of the internal IP
            </summary>
            <param name="address">IPAddress to be converted</param>
            <returns>long representation of the IPAddress</returns>
        </member>
        <member name="M:UdpKit.Utils.IPAddressExtensions.FromLongAddr(System.Int64)">
            <summary>
            Convert a Long value into a IPAddress
            </summary>
            <param name="addr">Value to convert</param>
            <returns>IPAddres Result</returns>
        </member>
        <member name="T:UdpKit.Utils.SubnetMask">
            <summary>
            Class to store and represents IP Submasks
            </summary>
        </member>
        <member name="F:UdpKit.Utils.SubnetMask.ClassA">
            <summary>
            Represents a Class A subnet
            </summary>
        </member>
        <member name="F:UdpKit.Utils.SubnetMask.ClassB">
            <summary>
            Represents a Class B subnet
            </summary>
        </member>
        <member name="F:UdpKit.Utils.SubnetMask.ClassC">
            <summary>
            Represents a Class C subnet
            </summary>
        </member>
        <member name="M:UdpKit.Utils.SubnetMask.CreateByHostBitLength(System.Int32)">
            <summary>
            Create a Submask based on the number of bits for the HOST
            </summary>
            <param name="hostpartLength">Number of bit of the host part</param>
            <returns>IPAddress that represents the network mask</returns>
        </member>
        <member name="M:UdpKit.Utils.SubnetMask.CreateByNetBitLength(System.Int32)">
            <summary>
            Create a Subnet mask based on the number of bits for the MASK
            </summary>
            <param name="netpartLength">Number of bit of the sub net mask</param>
            <returns>IPAddress that represents the network mask</returns>
        </member>
        <member name="M:UdpKit.Utils.SubnetMask.CreateByHostNumber(System.Int32)">
            <summary>
            Create a subnet mask based on the number of hosts that need to be available
            </summary>
            <param name="numberOfHosts">Number of host in the subnet</param>
            <returns>IPAddress that represents the network mask</returns>
        </member>
        <member name="T:UdpKit.Utils.UdpEndPointExtensions">
             <summary>
             UdpEndPoint conversion methods
            
             Using those methods you can convert UdpEndPoint between <see cref="T:System.Net.IPEndPoint"/> and <see cref="T:System.Net.EndPoint"/> classes
             </summary>
        </member>
        <member name="M:UdpKit.Utils.UdpEndPointExtensions.ConvertToUdpEndPoint(System.Net.EndPoint)">
            <summary>
            Convert <see cref="T:System.Net.EndPoint"/> to <see cref="T:UdpKit.UdpEndPoint"/>
            </summary>
            <param name="endpoint">EndPoint to be converted</param>
            <returns>UdpEndPoint</returns>
        </member>
        <member name="M:UdpKit.Utils.UdpEndPointExtensions.ConvertToUdpEndPoint(System.Net.IPEndPoint)">
            <summary>
            Convert <see cref="T:System.Net.IPEndPoint"/> to <see cref="T:UdpKit.UdpEndPoint"/>
            </summary>
            <param name="endpoint">IPEndPoint to be converted</param>
            <returns>UdpEndPoint</returns>
        </member>
        <member name="M:UdpKit.Utils.UdpEndPointExtensions.ConvertToIPEndPoint(UdpKit.UdpEndPoint)">
            <summary>
            Convert <see cref="T:UdpKit.UdpEndPoint"/> to <see cref="T:System.Net.IPAddress"/>
            </summary>
            <param name="endpoint">UdpEndPoint to be converted</param>
            <returns>IPEndPoint</returns>
        </member>
        <member name="M:UdpKit.Utils.UdpEndPointExtensions.ConvertToUdpIPv4Address(System.Net.IPAddress)">
            <summary>
            Convert <see cref="T:System.Net.IPAddress"/> to <see cref="T:UdpKit.UdpIPv4Address"/>
            </summary>
            <param name="address">IPAddress to be converted</param>
            <returns>UdpIPv4Address</returns>
        </member>
    </members>
</doc>
